return(deg)
} else {
return(val)
}
}
nus_admis <- admissions_tables[[2]]
View(nus_admis)
nus_admis <- admissions_tables[[2]]
# Use first row as the column names
colnames(nus_admis) <- c("index", "degree",nus_admis[1,c(3:ncol(nus_admis))])
# Drop the first row from the data and the first column
nus_admis <- nus_admis[-1,-1]
# Drop the rows which are college names. Take advantage of the fact that
nus_admis <- nus_admis %>%
rowwise() %>%
mutate(is_college = length(unique(c_across())) == 1 ) %>%
filter(!is_college) %>%
select(!is_college)
# Perform special character removal and text standardasation on the degree names
nus_admis$degree <- standardize_cols(nus_admis$degree)
q <- matrix(1:6, 3, 2)
q[, -1]
q <- 5:8
names(q) <- lettersp5:8
names(q) <- letters[5:8]
q
a <- c(3, 0, TRUE)
b <- c(4, 0, FALSE)
a|b
as.POSIXct("Sep-28-2019")
as.POSIXct("Sep-28-2019 07:00:00 AM UTC")
x <- as.Date('2018-10-01')
month(x)
as.month(x)
months(x)
q
q <- matrix(1:9, 3, 3)
q
q[upper.tri(q)]
upper.diag(1)
upper.diag(q)
upper.triangular(q)
upper.tri(q)
q[upper.tri(q)]
q
x <- c(12L, 6L, 10L, 8L, 15L, 14L, 19L, 18L, 23L, 59L)
median(x)
str(median(x))
type(median(x))
class(median(x))
Na/1
NA/1
cbind(c(1,2,3), c(4,5,6))
cbind(c(1,2,3), list(4,5,6))
str(cbind(c(1,2,3), list(4,5,6)))
str(cbind(c(1,2,3), list(4,5,6)))
q <- c("Ash Rd", "Ash Cir", "Ash St")
grepl(q, indadt)
grepl(q, indat)
grepl("Rd, Ave, St, Dr",q)
grepl("Rd|Ave|St|Dr",q)
v <- c(1,2,3)
names(v) <- c("a","b","c")
v[4] <- 4
v
names(v[4])
# For data cleaning
library(dplyr)
# For string manipulation
library(stringr)
# For reading and writing to excel workbooks
library(readxl)
library(writexl)
library(xlsx)
# For scraping
library(rvest)
# For pivoting
library(tidyr)
library(readr)
# For appending sheets to existing workbooks
library(openxlsx)
# GES Data
ges_raw <- read_excel("/Users/carelchay/OneDrive - National University of Singapore/GES Results.xlsx", sheet = 1)
# Admissions Information #
# Admissions info is scraped from this google sheet
igp_data <- read_html("https://docs.google.com/spreadsheets/d/1MPEDZpw26TjN7dTsQzsbnXHZa47og0qSrdHrlT7nLKc/pubhtml#")
# OR read in from file if link doesn't work
# igp_data <- readRDS(file = "igp_webpage.rds")
admissions_tables <- html_table(igp_data, fill = TRUE)
View(admissions_tables)
nus_admis <- admissions_tables[[2]]
# Use first row as the column names
colnames(nus_admis) <- c("index", "degree",nus_admis[1,c(3:ncol(nus_admis))])
# Drop the first row from the data and the first column
nus_admis <- nus_admis[-1,-1]
# Drop the rows which are college names. Take advantage of the fact that
nus_admis <- nus_admis %>%
rowwise() %>%
mutate(is_college = length(unique(c_across())) == 1 ) %>%
filter(!is_college) %>%
select(!is_college)
# Perform special character removal and text standardasation on the degree names
nus_admis$degree <- standardize_cols(nus_admis$degree)
# Functions that will be used throughout this file
standardize_cols <- function(vec){
# Takes a character vector and removes special characters from it. Also uppercases the first letter of each word and replaces each "And" with the ampersand &
vec <- sapply(vec, function(x) {str_trim(str_flatten(unlist(str_extract_all(x, "[^\\*\\^\\#]*"))))})
vec <- sapply(vec, function(x) {str_replace_all(str_to_title(x), "And", "&")})
return(vec)
}
deg_replaces <- function(deg, replacement_list){
val <- replacement_list[[deg]]
# print(val)
if(is.null(val)){
return(deg)
} else {
return(val)
}
}
nus_admis <- admissions_tables[[2]]
# Use first row as the column names
colnames(nus_admis) <- c("index", "degree",nus_admis[1,c(3:ncol(nus_admis))])
# Drop the first row from the data and the first column
nus_admis <- nus_admis[-1,-1]
# Drop the rows which are college names. Take advantage of the fact that
nus_admis <- nus_admis %>%
rowwise() %>%
mutate(is_college = length(unique(c_across())) == 1 ) %>%
filter(!is_college) %>%
select(!is_college)
View(nus_admis)
# Perform special character removal and text standardasation on the degree names
nus_admis$degree <- standardize_cols(nus_admis$degree)
# Take advantage of the arrangement wherein most degree names have 3 entries (one for RP cutoff, one for GPA requirement and one for enrollment). Obtain the portion of the dataframe with 3 rows per degree name. The datatypes for each row are known to us. Add the type identifier column
nus_3_rows<- nus_admis %>%
group_by(degree) %>%
summarize(across() ,row_count = n(), .groups = "drop") %>%
filter(row_count == 3) %>%
arrange(degree) %>%
mutate(data_type = rep(c("rp", "gpa", "enrollment"), n()/3)) %>%
select(!row_count)
View(nus_3_rows)
# Take advantage of the arrangement wherein most degree names have 3 entries (one for RP cutoff, one for GPA requirement and one for enrollment). Obtain the portion of the dataframe with 3 rows per degree name. The datatypes for each row are known to us. Add the type identifier column
nus_3_rows<- nus_admis %>%
group_by(degree) %>%
summarize(across() ,row_count = n(), .groups = "drop") %>%
filter(row_count == 3) %>%
arrange(degree) %>%
mutate(data_type = rep(c("rp", "gpa", "enrollment"), .after  = degree, n()/3)) %>%
select(!row_count)
# Take advantage of the arrangement wherein most degree names have 3 entries (one for RP cutoff, one for GPA requirement and one for enrollment). Obtain the portion of the dataframe with 3 rows per degree name. The datatypes for each row are known to us. Add the type identifier column
nus_3_rows<- nus_admis %>%
group_by(degree) %>%
summarize(across() ,row_count = n(), .groups = "drop") %>%
filter(row_count == 3) %>%
arrange(degree) %>%
mutate(data_type = rep(c("rp", "gpa", "enrollment"), n()/3), , .after  = degree) %>%
select(!row_count)
# Take advantage of the arrangement wherein most degree names have 3 entries (one for RP cutoff, one for GPA requirement and one for enrollment). Obtain the portion of the dataframe with 3 rows per degree name. The datatypes for each row are known to us. Add the type identifier column
nus_3_rows<- nus_admis %>%
group_by(degree) %>%
summarize(across() ,row_count = n(), .groups = "drop") %>%
filter(row_count == 3) %>%
arrange(degree) %>%
mutate(data_type = rep(c("rp", "gpa", "enrollment"), n()/3), .after  = degree) %>%
select(!row_count)
# Take advantage of the arrangement wherein most degree names have 3 entries (one for RP cutoff, one for GPA requirement and one for enrollment). Obtain the portion of the dataframe with 3 rows per degree name. The datatypes for each row are known to us. Add the type identifier column
nus_3_rows<- nus_admis %>%
group_by(degree) %>%
summarize(across() ,row_count = n(), .groups = "drop") %>%
filter(row_count == 3) %>%
arrange(degree) %>%
mutate(data_type = rep(c("rp", "gpa", "enrollment"), n()/3)) %>%
select(!row_count)
# Perform pivoting
nus_admis <- nus_admis %>%
relocate(data_type, .after = degree) %>%
pivot_longer(!c(degree, data_type),names_to = "Year") %>%
pivot_wider(names_from = data_type, values_from = value)
nus_admis <- admissions_tables[[2]]
# Use first row as the column names
colnames(nus_admis) <- c("index", "degree",nus_admis[1,c(3:ncol(nus_admis))])
# Drop the first row from the data and the first column
nus_admis <- nus_admis[-1,-1]
# Drop the rows which are college names. Take advantage of the fact that
nus_admis <- nus_admis %>%
rowwise() %>%
mutate(is_college = length(unique(c_across())) == 1 ) %>%
filter(!is_college) %>%
select(!is_college)
# Perform special character removal and text standardasation on the degree names
nus_admis$degree <- standardize_cols(nus_admis$degree)
# Take advantage of the arrangement wherein most degree names have 3 entries (one for RP cutoff, one for GPA requirement and one for enrollment). Obtain the portion of the dataframe with 3 rows per degree name. The datatypes for each row are known to us. Add the type identifier column
nus_3_rows<- nus_admis %>%
group_by(degree) %>%
summarize(across() ,row_count = n(), .groups = "drop") %>%
filter(row_count == 3) %>%
arrange(degree) %>%
mutate(data_type = rep(c("rp", "gpa", "enrollment"), n()/3)) %>%
select(!row_count)
# Edge cases which are not 3 rows, need to be handled separately
nus_not_3_rows<- nus_admis %>%
group_by(degree) %>%
summarize(across() ,row_count = n(), .groups = "drop") %>%
filter(row_count != 3) %>%
arrange(degree)
### Cleaning non 3 - Row data
# Now we begin the task of cleaning the non - 3 row data. This will require referencing the actual webpage. Visit [this link](https://docs.google.com/spreadsheets/d/1MPEDZpw26TjN7dTsQzsbnXHZa47og0qSrdHrlT7nLKc/pubhtml#).
# For these cases since the adjustements are highly specific to the I export them to an excel file and clean them individually
# Save to excel file
# write_xlsx(x = list("employment_stats" = uni_data), path = "../GES Data/consolidated.xlsx")
# wb <- openxlsx::loadWorkbook("../GES Data/consolidated.xlsx")
# addWorksheet(wb,"Sheet2")
# writeData(wb,"Sheet2",nus_not_3_rows)
# saveWorkbook(wb,"../GES Data/consolidated.xlsx",overwrite = TRUE)
# Read back in the cleaned sheet.
# cleaned_not_3_rows <- read_excel("../GES Data/consolidated.xlsx", sheet = "cleaned_nus_not_3_rows")
nus_not_3_rows <- readRDS("./nus_cleaned_not_3_rows.rds") %>%
select(!row_count)
# Combine them
nus_admis <- rbind(nus_3_rows, nus_not_3_rows)
# Perform pivoting
nus_admis <- nus_admis %>%
relocate(data_type, .after = degree) %>%
pivot_longer(!c(degree, data_type),names_to = "Year") %>%
pivot_wider(names_from = data_type, values_from = value)
nus_admis <- admissions_tables[[2]]
# Use first row as the column names
colnames(nus_admis) <- c("index", "degree",nus_admis[1,c(3:ncol(nus_admis))])
# Drop the first row from the data and the first column
nus_admis <- nus_admis[-1,-1]
# Drop the rows which are college names. Take advantage of the fact that
nus_admis <- nus_admis %>%
rowwise() %>%
mutate(is_college = length(unique(c_across())) == 1 ) %>%
filter(!is_college) %>%
select(!is_college)
# Perform special character removal and text standardasation on the degree names
nus_admis$degree <- standardize_cols(nus_admis$degree)
# Take advantage of the arrangement wherein most degree names have 3 entries (one for RP cutoff, one for GPA requirement and one for enrollment). Obtain the portion of the dataframe with 3 rows per degree name. The datatypes for each row are known to us. Add the type identifier column
nus_3_rows<- nus_admis %>%
group_by(degree) %>%
summarize(across() ,row_count = n(), .groups = "drop") %>%
filter(row_count == 3) %>%
arrange(degree) %>%
mutate(data_type = rep(c("rp", "gpa", "enrollment"), n()/3)) %>%
select(!row_count)
# Edge cases which are not 3 rows, need to be handled separately
nus_not_3_rows<- nus_admis %>%
group_by(degree) %>%
summarize(across() ,row_count = n(), .groups = "drop") %>%
filter(row_count != 3) %>%
arrange(degree)
### Cleaning non 3 - Row data
# Now we begin the task of cleaning the non - 3 row data. This will require referencing the actual webpage. Visit [this link](https://docs.google.com/spreadsheets/d/1MPEDZpw26TjN7dTsQzsbnXHZa47og0qSrdHrlT7nLKc/pubhtml#).
# For these cases since the adjustements are highly specific to the I export them to an excel file and clean them individually
# Save to excel file
# write_xlsx(x = list("employment_stats" = uni_data), path = "../GES Data/consolidated.xlsx")
# wb <- openxlsx::loadWorkbook("../GES Data/consolidated.xlsx")
# addWorksheet(wb,"Sheet2")
# writeData(wb,"Sheet2",nus_not_3_rows)
# saveWorkbook(wb,"../GES Data/consolidated.xlsx",overwrite = TRUE)
# Read back in the cleaned sheet.
# cleaned_not_3_rows <- read_excel("../GES Data/consolidated.xlsx", sheet = "cleaned_nus_not_3_rows")
nus_not_3_rows <- readRDS("./nus_cleaned_not_3_rows.rds") %>%
select(!row_count)
# Combine them
nus_admis <- rbind(nus_3_rows, nus_not_3_rows)
# Perform pivoting
nus_admis <- nus_admis %>%
relocate(data_type, .after = degree) %>%
pivot_longer(!c(degree, data_type),names_to = "Year") %>%
pivot_wider(names_from = data_type, values_from = value)
# Cleanup columns. ie extract the relevant data, change the column types #
# Take the first year for the year column. Convert to number
nus_admis$Year <- as.numeric(sapply(nus_admis$Year, function(x) {str_extract(x, "[0-9]{4}")}))
# Take the rank points. Convert to number
nus_admis$rp <- as.numeric(sapply(nus_admis$rp, function(x) {str_extract(x, "(?<=\\().*(?=\\))")}))
# Take the GPA. Convert to number
nus_admis$gpa <- as.numeric(sapply(nus_admis$gpa, function(x) {str_extract(x, "[0-9.]+")}))
# Take the enrollment Convert to number
nus_admis$enrollment <- as.numeric(sapply(nus_admis$enrollment, function(x) {str_extract(x, "[0-9]+")}))
# There are some issues with the degree column. For example the computing majors are subsetted by the prefix "computing". Many other majors arealso have the suffixed (Until AY . . .)
nus_admis <- nus_admis %>%
# Clean the computing majors
mutate(degree = ifelse(str_detect(degree, "Computing"), str_extract(degree, "(?<=\\().+(?=\\))"), degree)) %>%
# Remove AY tags
mutate(degree = ifelse(str_detect(degree, "(Until Ay)|(From Ay)"), str_replace(degree, "\\(.+\\)", ""), degree ) ) %>%
mutate(degree = str_trim(degree)) %>%
mutate(degree = ifelse(degree == "Engineering", "Engineering (Common)", degree))
# Remove rows without any useful datapoints. (ie all columns aside from the degree and year are NA)
nus_admis <- nus_admis %>%
rowwise() %>%
mutate(check = sum(is.na(across(!c(degree,Year)))) == 3) %>%
ungroup() %>%
filter(!check) %>%
select(!check) %>%
# Add the university tag
mutate(university = "National University of Singapore", .before = degree)
# Tidy up some degree names
replacement_list <- list("Business Administration (Accountancy)" = "Accountancy")
nus_admis$degree <- sapply(nus_admis$degree, function(x){deg_replaces(x, replacement_list)})
# Cleaning up the GES data for NUS #
ges_nus <- ges_raw %>% filter(university == "National University of Singapore")
# Cleanup degree and school column
ges_nus$school <- standardize_cols(ges_nus$school)
ges_nus$degree <- standardize_cols(ges_nus$degree)
#  most degree names start with "Bachelor Of <faculty>". Let's remove that. Let's also remove rows with NA values as they are of no use to us.
ges_nus$degree <- sapply(ges_nus$degree, function(x) {str_trim(str_replace(x, "Bachelor Of", ""))})
# Check which rows contain an NA value. This returns the boolean index of rows containing null values.
row_with_na <- (rowSums(is.na(ges_nus)) > 0)
# Take only rows with no NA values. Taking advantage of the fact that if one column is NA there is no useful information in that row
ges_nus <- ges_nus[!row_with_na,]
# For the computing and engineering faculties, there is only information regarding the honors programs. Notice that all the degree names in those faculties are now prefixed by the degree type. We can simply extract the simplified degree name from within the bracket
ges_nus <- ges_nus %>%
rowwise() %>%
mutate(degree = ifelse(school %in% c(
"School Of Computing", "Faculty Of Engineering", "School Of Design & Environment"
), str_extract(degree,"(?<=\\().*(?=\\))"),degree))
# There are still some degrees that are identical but are  named differently. For example all the Pharmacy degrees (whether or not "honors" is indicated) refer to the same programm (I know this because I am an NUS student). Let's replace them all with the same function as in the NTU data. At the same time I will replace degrees with their simplified names.
nus_replacement_list <- list(
"Science (Pharmacy)" = "Pharmacy (Hons)",
"Science (Pharmacy) (Hons)" = "Pharmacy (Hons)",
"Science (Pharmacy)(Hons)" = "Pharmacy (Hons)",
"Science (Nursing) (Hons)" = "Nursing (Hons)",
"Science (Nursing)" = "Nursing",
"Medicine & Bachelor Of Surgery (Mbbs)" = "Medicine & Bachelor Of Surgery",
"Business Administration (Accountancy)" = "Accountancy",
"Business Administration (Accountancy) (Hons)" = "Accountancy (Hons)"
)
ges_nus$degree <- sapply(ges_nus$degree, function(x) {deg_replaces(x, nus_replacement_list)})
# Quick look at all the named NUS degrees with their recorded data counts
nus_data_counts <- ges_nus %>%
group_by(school, degree) %>%
summarize(num_years = length(year), .groups = "drop") %>%
arrange(num_years, school)
# Computer Engineering used to be under FOE but is now classified under MDS. Standardize it to be under FOE
ges_nus <- ges_nus %>%
rowwise() %>%
mutate(school = ifelse(school == "Multi-Disciplinary Programme" && degree == "Engineering (Computer Engineering)", "Faculty Of Engineering", school), degree = ifelse(school == "Faculty Of Engineering" && degree == "Engineering (Computer Engineering)", "Computer Engineering", degree))
# Check Data Counts again
nus_data_counts <- ges_nus %>%
group_by(school, degree) %>%
summarize(num_years = length(year), .groups = "drop") %>%
arrange(num_years, school)
# Cleaned NUS data. Let's take degrees with data from at least 4 years.
nus_deg_4years <- nus_data_counts %>%
filter(num_years >= 4) %>%
pull(degree)
ges_nus <- ges_nus %>%
filter(degree %in% nus_deg_4years)
# Clean global environment
rm(list = c("nus_deg_4years", "nus_data_counts", "nus_replacement_list", "row_with_na"))
# Cleaning up the GES data for NUS #
ges_nus <- ges_raw %>% filter(university == "National University of Singapore")
# Cleanup degree and school column
ges_nus$school <- standardize_cols(ges_nus$school)
ges_nus$degree <- standardize_cols(ges_nus$degree)
#  most degree names start with "Bachelor Of <faculty>". Let's remove that. Let's also remove rows with NA values as they are of no use to us.
ges_nus$degree <- sapply(ges_nus$degree, function(x) {str_trim(str_replace(x, "Bachelor Of", ""))})
# Check which rows contain an NA value. This returns the boolean index of rows containing null values.
row_with_na <- (rowSums(is.na(ges_nus)) > 0)
# Take only rows with no NA values. Taking advantage of the fact that if one column is NA there is no useful information in that row
ges_nus <- ges_nus[!row_with_na,]
# For the computing and engineering faculties, there is only information regarding the honors programs. Notice that all the degree names in those faculties are now prefixed by the degree type. We can simply extract the simplified degree name from within the bracket
ges_nus <- ges_nus %>%
rowwise() %>%
mutate(degree = ifelse(school %in% c(
"School Of Computing", "Faculty Of Engineering", "School Of Design & Environment"
), str_extract(degree,"(?<=\\().*(?=\\))"),degree))
# There are still some degrees that are identical but are  named differently. For example all the Pharmacy degrees (whether or not "honors" is indicated) refer to the same programm (I know this because I am an NUS student). Let's replace them all with the same function as in the NTU data. At the same time I will replace degrees with their simplified names.
nus_replacement_list <- list(
"Science (Pharmacy)" = "Pharmacy (Hons)",
"Science (Pharmacy) (Hons)" = "Pharmacy (Hons)",
"Science (Pharmacy)(Hons)" = "Pharmacy (Hons)",
"Science (Nursing) (Hons)" = "Nursing (Hons)",
"Science (Nursing)" = "Nursing",
"Medicine & Bachelor Of Surgery (Mbbs)" = "Medicine & Bachelor Of Surgery",
"Business Administration (Accountancy)" = "Accountancy",
"Business Administration (Accountancy) (Hons)" = "Accountancy (Hons)"
)
ges_nus$degree <- sapply(ges_nus$degree, function(x) {deg_replaces(x, nus_replacement_list)})
# Quick look at all the named NUS degrees with their recorded data counts
nus_data_counts <- ges_nus %>%
group_by(school, degree) %>%
summarize(num_years = length(year), .groups = "drop") %>%
arrange(num_years, school)
# Computer Engineering used to be under FOE but is now classified under MDS. Standardize it to be under FOE
ges_nus <- ges_nus %>%
rowwise() %>%
mutate(school = ifelse(school == "Multi-Disciplinary Programme" && degree == "Engineering (Computer Engineering)", "Faculty Of Engineering", school), degree = ifelse(school == "Faculty Of Engineering" && degree == "Engineering (Computer Engineering)", "Computer Engineering", degree))
# Check Data Counts again
nus_data_counts <- ges_nus %>%
group_by(school, degree) %>%
summarize(num_years = length(year), .groups = "drop") %>%
arrange(num_years, school)
# Cleaned NUS data. Let's take degrees with data from at least 4 years.
nus_deg_4years <- nus_data_counts %>%
filter(num_years >= 4) %>%
pull(degree)
ges_nus <- ges_nus %>%
filter(degree %in% nus_deg_4years)
# Clean global environment
rm(list = c("nus_deg_4years", "nus_data_counts", "nus_replacement_list", "row_with_na"))
nus_admis <- admissions_tables[[2]]
# Use first row as the column names
colnames(nus_admis) <- c("index", "degree",nus_admis[1,c(3:ncol(nus_admis))])
# Drop the first row from the data and the first column
nus_admis <- nus_admis[-1,-1]
# Drop the rows which are college names. Take advantage of the fact that
nus_admis <- nus_admis %>%
rowwise() %>%
mutate(is_college = length(unique(c_across())) == 1 ) %>%
filter(!is_college) %>%
select(!is_college)
# Perform special character removal and text standardasation on the degree names
nus_admis$degree <- standardize_cols(nus_admis$degree)
# Take advantage of the arrangement wherein most degree names have 3 entries (one for RP cutoff, one for GPA requirement and one for enrollment). Obtain the portion of the dataframe with 3 rows per degree name. The datatypes for each row are known to us. Add the type identifier column
nus_3_rows<- nus_admis %>%
group_by(degree) %>%
summarize(across() ,row_count = n(), .groups = "drop") %>%
filter(row_count == 3) %>%
arrange(degree) %>%
mutate(data_type = rep(c("rp", "gpa", "enrollment"), n()/3)) %>%
select(!row_count)
# Edge cases which are not 3 rows, need to be handled separately
nus_not_3_rows<- nus_admis %>%
group_by(degree) %>%
summarize(across() ,row_count = n(), .groups = "drop") %>%
filter(row_count != 3) %>%
arrange(degree)
### Cleaning non 3 - Row data
# Now we begin the task of cleaning the non - 3 row data. This will require referencing the actual webpage. Visit [this link](https://docs.google.com/spreadsheets/d/1MPEDZpw26TjN7dTsQzsbnXHZa47og0qSrdHrlT7nLKc/pubhtml#).
# For these cases since the adjustements are highly specific to the I export them to an excel file and clean them individually
# Save to excel file
# write_xlsx(x = list("employment_stats" = uni_data), path = "../GES Data/consolidated.xlsx")
# wb <- openxlsx::loadWorkbook("../GES Data/consolidated.xlsx")
# addWorksheet(wb,"Sheet2")
# writeData(wb,"Sheet2",nus_not_3_rows)
# saveWorkbook(wb,"../GES Data/consolidated.xlsx",overwrite = TRUE)
# Read back in the cleaned sheet.
# cleaned_not_3_rows <- read_excel("../GES Data/consolidated.xlsx", sheet = "cleaned_nus_not_3_rows")
nus_not_3_rows <- readRDS("./nus_cleaned_not_3_rows.rds") %>%
select(!row_count)
# Combine them
nus_admis <- rbind(nus_3_rows, nus_not_3_rows)
# Perform pivoting
nus_admis <- nus_admis %>%
relocate(data_type, .after = degree) %>%
pivot_longer(!c(degree, data_type),names_to = "Year") %>%
pivot_wider(names_from = data_type, values_from = value)
# Cleanup columns. ie extract the relevant data, change the column types #
# Take the first year for the year column. Convert to number
nus_admis$Year <- as.numeric(sapply(nus_admis$Year, function(x) {str_extract(x, "[0-9]{4}")}))
# Take the rank points. Convert to number
nus_admis$rp <- as.numeric(sapply(nus_admis$rp, function(x) {str_extract(x, "(?<=\\().*(?=\\))")}))
# Take the GPA. Convert to number
nus_admis$gpa <- as.numeric(sapply(nus_admis$gpa, function(x) {str_extract(x, "[0-9.]+")}))
# Take the enrollment Convert to number
nus_admis$enrollment <- as.numeric(sapply(nus_admis$enrollment, function(x) {str_extract(x, "[0-9]+")}))
# There are some issues with the degree column. For example the computing majors are subsetted by the prefix "computing". Many other majors arealso have the suffixed (Until AY . . .)
nus_admis <- nus_admis %>%
# Clean the computing majors
mutate(degree = ifelse(str_detect(degree, "Computing"), str_extract(degree, "(?<=\\().+(?=\\))"), degree)) %>%
# Remove AY tags
mutate(degree = ifelse(str_detect(degree, "(Until Ay)|(From Ay)"), str_replace(degree, "\\(.+\\)", ""), degree ) ) %>%
mutate(degree = str_trim(degree)) %>%
mutate(degree = ifelse(degree == "Engineering", "Engineering (Common)", degree))
# Remove rows without any useful datapoints. (ie all columns aside from the degree and year are NA)
nus_admis <- nus_admis %>%
rowwise() %>%
mutate(check = sum(is.na(across(!c(degree,Year)))) == 3) %>%
ungroup() %>%
filter(!check) %>%
select(!check) %>%
# Add the university tag
mutate(university = "National University of Singapore", .before = degree)
# Tidy up some degree names
replacement_list <- list("Business Administration (Accountancy)" = "Accountancy")
nus_admis$degree <- sapply(nus_admis$degree, function(x){deg_replaces(x, replacement_list)})
test <- left_join(ges_nus, nus_admis, by =c("relation" = "relation", "year" = "Year", "university" = "university"), suffix = c("_ges", "_igp"), keep = T)
nus_admis <- nus_admis %>%
mutate(relation = degree)
ges_nus <- ges_nus %>%
mutate(relation = degree) %>%
# Remove honors suffix from ges data since they would have the same admission requirements
mutate(relation = str_trim(str_replace(relation, "\\(Hons\\)", "")))
nus_admis_deg <- nus_admis %>%
select(relation) %>%
distinct(relation) %>%
arrange(relation)
ges_nus_deg <- ges_nus %>%
select(degree, relation, school) %>%
distinct(degree, .keep_all = T) %>%
arrange(degree)
# now need to assign the relationships (for degrees in GES data with no direct matches in the admissions data). This is done by visual inspection.
# Custom relation list. No match for YST music  / Yale NUS programmes
relation_list <- list(
"Applied Science" = "Science",
"Arts" = "Arts & Social Sciences",
"Dental Surgery" = "Dentistry",
"Laws" = "Law",
"Medicine & Bachelor Of Surgery" = "Medicine",
"Project & Facilities Management"	= "Project & Facilities Management/ Infrastructure & Project Management",
"Social Sciences" = "Arts & Social Sciences"
)
ges_nus$relation <- sapply(ges_nus$relation, function(x){deg_replaces(x, relation_list)})
test <- left_join(ges_nus, nus_admis, by =c("relation" = "relation", "year" = "Year", "university" = "university"), suffix = c("_ges", "_igp"), keep = T)
test <- inner_join(ges_nus, nus_admis, by =c("relation" = "relation", "year" = "Year", "university" = "university"), suffix = c("_ges", "_igp"), keep = T)
test <- left_join(ges_nus, nus_admis, by =c("relation" = "relation", "year" = "Year", "university" = "university"), suffix = c("_ges", "_igp"), keep = T)
test <- left_join(ges_nus, nus_admis, by =c("relation" = "relation", "year" = "Year", "university" = "university"), suffix = c("_ges", "_igp"), keep = T)
View(test)
