---
title: "Data Cleaning"
author: "Carel"
date: "11/4/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r package_loading}
# For data cleaning
library(dplyr)
# For string manipulation
library(stringr)
# For reading and writing to excel workbooks
library(readxl)
library(writexl)
library(xlsx)
# For scraping
library(rvest)
# For pivoting
library(tidyr)
library(readr)
# For appending sheets to existing workbooks
library(openxlsx)
```

Obtaining the raw data that will be used later on
```{r data_setup}
# GES Data
ges_raw <- read_excel("/Users/carelchay/OneDrive - National University of Singapore/GES Results.xlsx", sheet = 1)

# Admissions Information #
# Admissions info is scraped from this google sheet
igp_data <- read_html("https://docs.google.com/spreadsheets/d/1MPEDZpw26TjN7dTsQzsbnXHZa47og0qSrdHrlT7nLKc/pubhtml#")

# OR read in from file if link doesn't work
# igp_data <- readRDS(file = "igp_webpage.rds")

admissions_tables <- html_table(igp_data, fill = TRUE)
```

# General Functions
```{r general_functions}
# Functions that will be used throughout this file

standardize_cols <- function(vec){
  # Takes a character vector and removes special characters from it. Also uppercases the first letter of each word and replaces each "And" with the ampersand &
  vec <- sapply(vec, function(x) {str_trim(str_flatten(unlist(str_extract_all(x, "[^\\*\\^\\#]*"))))})
  vec <- sapply(vec, function(x) {str_replace_all(str_to_title(x), "And", "&")})
  return(vec)
} 

deg_replaces <- function(deg, replacement_list){
    val <- replacement_list[[deg]]
    # print(val)
    if(is.null(val)){
      return(deg)
    } else {
      return(val)
    }
}

```


The three universities under consideration are NUS, NTU & SMU. At the final result I want two tables :

A. The table of all the GES results by year for each degree program

B. The table of all the admissions information by year for each degree program

The workflow for each of the universities is as follows :

1. Clean the GES data & Admissions data. 

2. Ensure that the degree names in both tables match since the degree names will be the basis of the relationship between the two tables in the final dashboard

When steps 1 & 2 have been performed for the 3 universities, row-bind the relevant information into two tables and export them. 

# Cleaning NUS Data
```{r nus_ges_cleanup}
# Cleaning up the GES data for NUS #
ges_nus <- ges_raw %>% filter(university == "National University of Singapore")
# Cleanup degree and school column
ges_nus$school <- standardize_cols(ges_nus$school)
ges_nus$degree <- standardize_cols(ges_nus$degree)

#  most degree names start with "Bachelor Of <faculty>". Let's remove that. Let's also remove rows with NA values as they are of no use to us.
ges_nus$degree <- sapply(ges_nus$degree, function(x) {str_trim(str_replace(x, "Bachelor Of", ""))})

# Check which rows contain an NA value. This returns the boolean index of rows containing null values. 
row_with_na <- (rowSums(is.na(ges_nus)) > 0)
# Take only rows with no NA values. Taking advantage of the fact that if one column is NA there is no useful information in that row 
ges_nus <- ges_nus[!row_with_na,]


# For the computing and engineering faculties, there is only information regarding the honors programs. Notice that all the degree names in those faculties are now prefixed by the degree type. We can simply extract the simplified degree name from within the bracket
ges_nus <- ges_nus %>% 
  rowwise() %>% 
  mutate(degree = ifelse(school %in% c(
    "School Of Computing", "Faculty Of Engineering", "School Of Design & Environment"
  ), str_extract(degree,"(?<=\\().*(?=\\))"),degree))

# There are still some degrees that are identical but are  named differently. For example all the Pharmacy degrees (whether or not "honors" is indicated) refer to the same programm (I know this because I am an NUS student). Let's replace them all with the same function as in the NTU data. At the same time I will replace degrees with their simplified names.
nus_replacement_list <- list(
  "Science (Pharmacy)" = "Pharmacy (Hons)",
  "Science (Pharmacy) (Hons)" = "Pharmacy (Hons)",
  "Science (Pharmacy)(Hons)" = "Pharmacy (Hons)",
  "Science (Nursing) (Hons)" = "Nursing (Hons)",
  "Science (Nursing)" = "Nursing",
  "Medicine & Bachelor Of Surgery (Mbbs)" = "Medicine & Bachelor Of Surgery",
  "Business Administration (Accountancy)" = "Accountancy",
  "Business Administration (Accountancy) (Hons)" = "Accountancy (Hons)"
)

ges_nus$degree <- sapply(ges_nus$degree, function(x) {deg_replaces(x, nus_replacement_list)})

# Quick look at all the named NUS degrees with their recorded data counts
nus_data_counts <- ges_nus %>% 
  group_by(school, degree) %>% 
  summarize(num_years = length(year), .groups = "drop") %>% 
  arrange(num_years, school)

# Computer Engineering used to be under FOE but is now classified under MDS. Standardize it to be under FOE
ges_nus <- ges_nus %>% 
  rowwise() %>% 
  mutate(school = ifelse(school == "Multi-Disciplinary Programme" && degree == "Engineering (Computer Engineering)", "Faculty Of Engineering", school), degree = ifelse(school == "Faculty Of Engineering" && degree == "Engineering (Computer Engineering)", "Computer Engineering", degree))

# Check Data Counts again
nus_data_counts <- ges_nus %>% 
  group_by(school, degree) %>% 
  summarize(num_years = length(year), .groups = "drop") %>% 
  arrange(num_years, school)

# Cleaned NUS data. Let's take degrees with data from at least 4 years.
nus_deg_4years <- nus_data_counts %>% 
  filter(num_years >= 4) %>% 
  pull(degree)

ges_nus <- ges_nus %>% 
  filter(degree %in% nus_deg_4years)


# Clean global environment

rm(list = c("nus_deg_4years", "nus_data_counts", "nus_replacement_list", "row_with_na"))
```

```{r nus_admissions_cleanup}
nus_admis <- admissions_tables[[2]]

# Use first row as the column names
colnames(nus_admis) <- c("index", "degree",nus_admis[1,c(3:ncol(nus_admis))])
# Drop the first row from the data and the first column
nus_admis <- nus_admis[-1,-1]

# Drop the rows which are college names. Take advantage of the fact that 
nus_admis <- nus_admis %>% 
  rowwise() %>% 
  mutate(is_college = length(unique(c_across())) == 1 ) %>% 
  filter(!is_college) %>% 
  select(!is_college)

# Perform special character removal and text standardasation on the degree names
nus_admis$degree <- standardize_cols(nus_admis$degree)

# Take advantage of the arrangement wherein most degree names have 3 entries (one for RP cutoff, one for GPA requirement and one for enrollment). Obtain the portion of the dataframe with 3 rows per degree name. The datatypes for each row are known to us. Add the type identifier column
nus_3_rows<- nus_admis %>% 
  group_by(degree) %>% 
  summarize(across() ,row_count = n(), .groups = "drop") %>%
  filter(row_count == 3) %>% 
  arrange(degree) %>% 
  mutate(data_type = rep(c("rp", "gpa", "enrollment"), n()/3)) %>% 
  select(!row_count)

# Edge cases which are not 3 rows, need to be handled separately
nus_not_3_rows<- nus_admis %>% 
  group_by(degree) %>% 
  summarize(across() ,row_count = n(), .groups = "drop") %>%
  filter(row_count != 3) %>% 
  arrange(degree)

### Cleaning non 3 - Row data
# Now we begin the task of cleaning the non - 3 row data. This will require referencing the actual webpage. Visit [this link](https://docs.google.com/spreadsheets/d/1MPEDZpw26TjN7dTsQzsbnXHZa47og0qSrdHrlT7nLKc/pubhtml#). 

# For these cases since the adjustements are highly specific to the I export them to an excel file and clean them individually

# Save to excel file 
# write_xlsx(x = list("employment_stats" = uni_data), path = "../GES Data/consolidated.xlsx")

# wb <- openxlsx::loadWorkbook("../GES Data/consolidated.xlsx")
# addWorksheet(wb,"Sheet2")
# writeData(wb,"Sheet2",nus_not_3_rows)
# saveWorkbook(wb,"../GES Data/consolidated.xlsx",overwrite = TRUE)

# Read back in the cleaned sheet. 

# cleaned_not_3_rows <- read_excel("../GES Data/consolidated.xlsx", sheet = "cleaned_nus_not_3_rows")

nus_not_3_rows <- readRDS("./nus_cleaned_not_3_rows.rds") %>% 
  select(!row_count)

# Combine them 
nus_admis <- rbind(nus_3_rows, nus_not_3_rows)

# Perform pivoting
nus_admis <- nus_admis %>% 
  relocate(data_type, .after = degree) %>% 
  pivot_longer(!c(degree, data_type),names_to = "Year") %>% 
  pivot_wider(names_from = data_type, values_from = value)

# Cleanup columns. ie extract the relevant data, change the column types #

# Take the first year for the year column. Convert to number
nus_admis$Year <- as.numeric(sapply(nus_admis$Year, function(x) {str_extract(x, "[0-9]{4}")}))

# Take the rank points. Convert to number
nus_admis$rp <- as.numeric(sapply(nus_admis$rp, function(x) {str_extract(x, "(?<=\\().*(?=\\))")}))

# Take the GPA. Convert to number
nus_admis$gpa <- as.numeric(sapply(nus_admis$gpa, function(x) {str_extract(x, "[0-9.]+")}))

# Take the enrollment Convert to number
nus_admis$enrollment <- as.numeric(sapply(nus_admis$enrollment, function(x) {str_extract(x, "[0-9]+")}))

# There are some issues with the degree column. For example the computing majors are subsetted by the prefix "computing". Many other majors arealso have the suffixed (Until AY . . .) 
nus_admis <- nus_admis %>% 
  # Clean the computing majors
  mutate(degree = ifelse(str_detect(degree, "Computing"), str_extract(degree, "(?<=\\().+(?=\\))"), degree)) %>% 
  # Remove AY tags
  mutate(degree = ifelse(str_detect(degree, "(Until Ay)|(From Ay)"), str_replace(degree, "\\(.+\\)", ""), degree ) ) %>% 
  mutate(degree = str_trim(degree)) %>% 
  mutate(degree = ifelse(degree == "Engineering", "Engineering (Common)", degree))

# Remove rows without any useful datapoints. (ie all columns aside from the degree and year are NA)
nus_admis <- nus_admis %>% 
  rowwise() %>% 
  mutate(check = sum(is.na(across(!c(degree,Year)))) == 3) %>% 
  ungroup() %>% 
  filter(!check) %>% 
  select(!check) %>% 
  # Add the university tag
  mutate(university = "National University of Singapore", .before = degree)

# Tidy up some degree names
replacement_list <- list("Business Administration (Accountancy)" = "Accountancy")

nus_admis$degree <- sapply(nus_admis$degree, function(x){deg_replaces(x, replacement_list)})
```

```{r nus_joined_fields}
# Creating a column to match the ges & admissions data. create a new column "relation" to use to tie the two tables together. In most cases the GES degree will be identical to the admissions degree. However in some cases the admissions degree refers to a general programme and may encompass several majors in the GES table. 

# Create the relation column #
nus_admis <- nus_admis %>% 
  mutate(relation = degree)

ges_nus <- ges_nus %>% 
  mutate(relation = degree) %>% 
  # Remove honors suffix from ges data since they would have the same admission requirements
  mutate(relation = str_trim(str_replace(relation, "\\(Hons\\)", "")))

nus_admis_deg <- nus_admis %>% 
  select(relation) %>% 
  distinct(relation) %>% 
  arrange(relation)

ges_nus_deg <- ges_nus %>% 
  select(degree, relation, school) %>% 
  distinct(degree, .keep_all = T) %>% 
  arrange(degree)


# now need to assign the relationships (for degrees in GES data with no direct matches in the admissions data). This is done by visual inspection. 


# Custom relation list. No match for YST music  / Yale NUS programmes
relation_list <- list(
    "Applied Science" = "Science",
    "Arts" = "Arts & Social Sciences",
    "Dental Surgery" = "Dentistry",
    "Laws" = "Law",
    "Medicine & Bachelor Of Surgery" = "Medicine",
    "Project & Facilities Management"	= "Project & Facilities Management/ Infrastructure & Project Management",
    "Social Sciences" = "Arts & Social Sciences"
)

ges_nus$relation <- sapply(ges_nus$relation, function(x){deg_replaces(x, relation_list)})

test <- left_join(ges_nus, nus_admis, by =c("relation" = "relation", "year" = "Year", "university" = "university"), suffix = c("_ges", "_igp"), keep = T)
```


# Cleaning NTU Data
```{r ntu_ges_cleanup}
ges_ntu <- ges_raw %>% filter(university == "Nanyang Technological University")

# Cleanup degree and school column
ges_ntu$school <- standardize_cols(ges_ntu$school)
ges_ntu$degree <- standardize_cols(ges_ntu$degree)

#  most degree names start with "Bachelor Of <faculty>". Let's remove that. Let's also remove rows with NA values as they are of no use to us.
ges_ntu$degree <- sapply(ges_ntu$degree, function(x) {str_trim(str_replace(x, "Bachelor Of", ""))}) 

# Check which rows contain an NA value. This returns the boolean index of rows containing null values. 
row_with_na <- (rowSums(is.na(ges_ntu)) > 0)
# Take only rows with no NA values. Taking advantage of the fact that if one column is NA there is no useful information in that row 
ges_ntu <- ges_ntu[!row_with_na,] %>% 
  # Remove Prefix for some science degrees
  mutate(degree = str_trim(str_replace(degree, "Science \\(Hons\\) In", "" ) ) )



# Custom degree name replacement
ntu_replacement_list <- list(
  "Sport Science & Management" = "Sports Science & Management",
  "Physics / Applied Physics" = "Physics & Applied Physics",
  "Bachelor Of Science (Hons) In Physics/Applied Physics" = "Physics & Applied Physics",
  "Mathematical Science" = "Mathematical Sciences",
  "Bachelor Of Science (Hons) In Mathematics & Economics" = "Mathematics & Economics",
  "Bachelor Of Science (Hons) In Mathematical Sciences" = "Mathematical Sciences",
  "Bachelor Of Science (Hons) In Chemistry & Biological Chemistry" = "Chemistry & Biological Chemistry",
  "Bachelor Of Science (Hons) In Biological Sciences" = "Biological Sciences",
  "Environmental Earth Systems Science" = "Environmental Earth Systems Sciences",
  "Business (3-Yr Direct Honours Programme)" = "Business",
  "Bachelor Of Business (Hons)" = "Business",
  "Biomedical Science (Traditional Chinese Medicine)" = "Biomedical Sciences (Traditional Chinese Medicine)",
  "Biomedical Sciences & Chinese Medicine" = "Biomedical Sciences (Traditional Chinese Medicine)",
  "Double Degree In Bachelor Of Science (Hons) In Biomedical Sciences & Bachelor Of Medicine (Chinese Medicine)" = "Biomedical Sciences (Traditional Chinese Medicine)",
  "Biomedical Science" = "Biomedical Sciences",
  "Accountancy (3-Yr Direct Honours Programme)" = "Accountancy",
   "Bachelor Of Accountancy (Hons)" = "Accountancy",
  "Accountancy (Hons)" = "Accountancy",
  "Business (Hons)" = "Business",
  "Double Degree In  Accountancy (Hons) & Bachelor Of Business (Hons)" = "Accountancy & Business",
  "Double Degree In Bachelor Of Accountancy (Hons) & Bachelor Of Business (Hons)" = "Accountancy & Business",
  "Double Degree In  Business (Hons) & Bachelor Of Engineering (Hons) (Computer Science)" = "Business & Computing",
  "Double Degree In   Biomedical Sciences & Bachelor Of Medicine (Chinese Medicine)" = "Biomedical Sciences (Traditional Chinese Medicine)",
  "Physics/Applied Physics" = "Physics & Applied Physics",
  "Science (With Education)" = "Science (Education)",
  "Arts (With Education)" = "Arts (Education)"
)

ntu_data_counts[c(2, 9), 2]

ges_ntu$degree <- sapply(ges_ntu$degree, function(x) {deg_replaces(x, ntu_replacement_list)})

# Quick look at all the named ntu degrees with their recorded data counts
ntu_data_counts <- ges_ntu %>% 
  group_by(school, degree) %>% 
  summarize(num_years = length(year), .groups = "drop") %>% 
  arrange(num_years, school)


# Cleaned ntu data. Let's take degrees with data from at least 4 years.
ntu_deg_4years <- ntu_data_counts %>% 
  filter(num_years >= 4) %>% 
  pull(degree)

ges_ntu <- ges_ntu %>% 
  filter(degree %in% ntu_deg_4years)


# Clean global environment

rm(list = c("ntu_deg_4years", "ntu_data_counts", "ntu_replacement_list", "row_with_na"))
```

```{r ntu_admissions_cleanup}
ntu_admis <- admissions_tables[[3]]

# Use first row as the column names
colnames(ntu_admis) <- c("index", "degree",ntu_admis[1,c(3:ncol(ntu_admis))])
# Drop the first row from the data and the first column
ntu_admis <- ntu_admis[-1,-1]

# Drop the rows which are college names. Take advantage of the fact that 
ntu_admis <- ntu_admis %>% 
  rowwise() %>% 
  mutate(is_college = length(unique(c_across())) == 1 ) %>% 
  filter(!is_college) %>% 
  select(!is_college)

# Perform special character removal and text standardasation on the degree names
ntu_admis$degree <- standardize_cols(ntu_admis$degree)

# Take advantage of the arrangement wherein most degree names have 3 entries (one for RP cutoff, one for GPA requirement and one for enrollment). Obtain the portion of the dataframe with 3 rows per degree name. The datatypes for each row are known to us. Add the type identifier column
ntu_3_rows<- ntu_admis %>% 
  group_by(degree) %>% 
  summarize(across() ,row_count = n(), .groups = "drop") %>%
  filter(row_count == 3) %>% 
  arrange(degree) %>% 
  mutate(data_type = rep(c("rp", "gpa", "enrollment"), n()/3)) %>% 
  select(!row_count)

# Edge cases which are not 3 rows, need to be handled separately
ntu_not_3_rows<- ntu_admis %>% 
  group_by(degree) %>% 
  summarize(across() ,row_count = n(), .groups = "drop") %>%
  filter(row_count != 3) %>% 
  select(!row_count)
  

# The Non - 3 - row data for NTU concerns the double major programs for the college of science & and the college of humanities respectively. rename them as such
ntu_not_3_rows <- ntu_not_3_rows %>% 
  mutate(degree = rep(c("Double Major (Science)", "Double Major (Arts)"), each = 3), data_type = rep(c("rp", "gpa", "enrollment"), 2)) 

# Combine them 
ntu_admis <- rbind(ntu_3_rows, ntu_not_3_rows)

# Perform pivoting
ntu_admis <- ntu_admis %>% 
  relocate(data_type, .after = degree) %>% 
  pivot_longer(!c(degree, data_type),names_to = "Year") %>% 
  pivot_wider(names_from = data_type, values_from = value)

# Cleanup columns. ie extract the relevant data, change the column types #

# Take the first year for the year column. Convert to number
ntu_admis$Year <- as.numeric(sapply(ntu_admis$Year, function(x) {str_extract(x, "[0-9]{4}")}))

# Take the rank points. Convert to number
ntu_admis$rp <- as.numeric(sapply(ntu_admis$rp, function(x) {str_extract(x, "(?<=\\().*(?=\\))")}))

# Take the GPA. Convert to number
ntu_admis$gpa <- as.numeric(sapply(ntu_admis$gpa, function(x) {str_extract(x, "[0-9.]+")}))

# Take the enrollment Convert to number
ntu_admis$enrollment <- as.numeric(sapply(ntu_admis$enrollment, function(x) {str_extract(x, "[0-9]+")}))

# Remove rows without any useful datapoints. (ie all columns aside from the degree and year are NA)
ntu_admis <- ntu_admis %>% 
  rowwise() %>% 
  mutate(check = sum(is.na(across(!c(degree,Year)))) == 3) %>% 
  ungroup() %>% 
  filter(!check) %>% 
  select(!check) %>% 
  # Add the university tag
  mutate(university = "Nanyang Technological University", .before = degree)

# Clear workspace
rm(list = c("ntu_not_3_rows", "ntu_3_rows"))
```

```{r ntu_joined_fields}
# Creating a column to match the ges & admissions data. create a new column "relation" to use to tie the two tables together. In most cases the GES degree will be identical to the admissions degree. However in some cases the admissions degree refers to a general programme and may encompass several majors in the GES table. 

# Create the relation column #
ntu_admis <- ntu_admis %>% 
  mutate(relation = degree)

ges_ntu <- ges_ntu %>% 
  mutate(relation = degree) 

ntu_admis_deg <- ntu_admis %>% 
  select(relation) %>% 
  distinct(relation) %>% 
  arrange(relation)

ges_ntu_deg <- ges_ntu %>% 
  select(degree, relation, school) %>% 
  distinct(degree, .keep_all = T) %>% 
  arrange(degree)


# now need to assign the relationships (for degrees in GES data with no direct matches in the admissions data). This is done by visual inspection. 


# Custom relation list. Note that there are no matches for TCM  / Business & computing
relation_list <- list(
  # Take accountancy since it has the higher RP cutoff
    "Accountancy & Business" = "Accountancy",
    "Mathematics & Economics" = "Double Major (Arts)",
    "Physics & Applied Physics" = "Physics / Applied Physics",
    "Sports Science & Management" = "Sport Science & Management"
)

ges_ntu_deg[3, 2] == "Applied Science"
ges_ntu$relation <- sapply(ges_ntu$relation, function(x){deg_replaces(x, relation_list)})
```

# Cleaning SMU Data

```{r smu_ges_cleanup}
ges_smu <- ges_raw %>% filter(university == "Singapore Management University")

# Cleanup degree and school column
ges_smu$school <- standardize_cols(ges_smu$school)
ges_smu$degree <- standardize_cols(ges_smu$degree)

#  most degree names start with "Bachelor Of <faculty>". Let's remove that. Let's also remove rows with NA values as they are of no use to us.
# ges_smu$degree <- sapply(ges_smu$degree, function(x) {str_trim(str_replace(x, "Bachelor Of", ""))})

# Check which rows contain an NA value. This returns the boolean index of rows containing null values. 
row_with_na <- (rowSums(is.na(ges_smu)) > 0)
# Take only rows with no NA values. Taking advantage of the fact that if one column is NA there is no useful information in that row 
ges_smu <- ges_smu[!row_with_na,] %>% 
  # Remove Prefix for some science degrees
  mutate(school = str_trim(str_replace(school, " \\(4-Year Programme\\)", "")), degree = str_trim(str_replace(degree, " \\(4-(Years|Year) Programme\\)", "")))



# Custom degree name replacement
smu_replacement_list <- list(
  "Accountancy Cum Laude & Above" = "Accountancy (Cum Laude & Above)"
)


ges_smu$degree <- sapply(ges_smu$degree, function(x) {deg_replaces(x, smu_replacement_list)})

# Quick look at all the named smu degrees with their recorded data counts
smu_data_counts <- ges_smu %>% 
  group_by(school, degree) %>% 
  summarize(num_years = length(year), .groups = "drop") %>% 
  arrange(num_years, school)


# Cleaned smu data. Let's take degrees with data from at least 4 years.
smu_deg_4years <- smu_data_counts %>% 
  filter(num_years >= 4) %>% 
  pull(degree)

ges_smu <- ges_smu %>% 
  filter(degree %in% smu_deg_4years)


# Clean global environment

rm(list = c("smu_deg_4years", "smu_data_counts", "smu_replacement_list", "row_with_na"))
```

```{r smu_admissions_cleanup}
smu_admis <- admissions_tables[[4]]

# Use first row as the column names
colnames(smu_admis) <- c("index", "degree",smu_admis[1,c(3:ncol(smu_admis))])
# Drop the first row from the data and the first column
smu_admis <- smu_admis[-1,-1]

# Drop the rows which are college names. Take advantage of the fact that 
smu_admis <- smu_admis %>% 
  rowwise() %>% 
  mutate(is_college = length(unique(c_across())) == 1 ) %>% 
  filter(!is_college) %>% 
  select(!is_college)

# Perform special character removal and text standardasation on the degree names
smu_admis$degree <- standardize_cols(smu_admis$degree)

# Take advantage of the arrangement wherein most degree names have 3 entries (one for RP cutoff, one for GPA requirement and one for enrollment). Obtain the portion of the dataframe with 3 rows per degree name. The datatypes for each row are known to us. Add the type identifier column.

# All degrees for SMU have 3 rows
smu_admis<- smu_admis %>% 
  group_by(degree) %>% 
  summarize(across() ,row_count = n(), .groups = "drop") %>%
  filter(row_count == 3) %>% 
  arrange(degree) %>% 
  mutate(data_type = rep(c("rp", "gpa", "enrollment"), n()/3)) %>% 
  select(!row_count)

  

# Perform pivoting
smu_admis <- smu_admis %>% 
  relocate(data_type, .after = degree) %>% 
  pivot_longer(!c(degree, data_type),names_to = "Year") %>% 
  pivot_wider(names_from = data_type, values_from = value)

# Cleanup columns. ie extract the relevant data, change the column types #

# Take the first year for the year column. Convert to number
smu_admis$Year <- as.numeric(sapply(smu_admis$Year, function(x) {str_extract(x, "[0-9]{4}")}))

# Take the rank points. Convert to number
smu_admis$rp <- as.numeric(sapply(smu_admis$rp, function(x) {str_extract(x, "(?<=\\().*(?=\\))")}))

# Take the GPA. Convert to number
smu_admis$gpa <- as.numeric(sapply(smu_admis$gpa, function(x) {str_extract(x, "[0-9.]+")}))

# Take the enrollment Convert to number
smu_admis$enrollment <- as.numeric(sapply(smu_admis$enrollment, function(x) {str_extract(x, "[0-9]+")}))

# Remove rows without any useful datapoints. (ie all columns aside from the degree and year are NA)
smu_admis <- smu_admis %>% 
  rowwise() %>% 
  mutate(check = sum(is.na(across(!c(degree,Year)))) == 3) %>% 
  ungroup() %>% 
  filter(!check) %>% 
  select(!check) %>% 
  # Add the university tag
  mutate(university = "Singapore Management University", .before = degree)
```

```{r smu_joined_fields}
# Creating a column to match the ges & admissions data. create a new column "relation" to use to tie the two tables together. In most cases the GES degree will be identical to the admissions degree. However in some cases the admissions degree refers to a general programme and may encompass several majors in the GES table. 

# Create the relation column #
smu_admis <- smu_admis %>% 
  mutate(relation = degree)

ges_smu <- ges_smu %>% 
  # Remove Cum Laude identifier
  mutate(relation = str_trim(str_replace(degree, "\\(.+\\)", "")))



# now need to assign the relationships (for degrees in GES data with no direct matches in the admissions data). This is done by visual inspection. 


# Custom relation list. Note that there are no matches for TCM  / Business & computing
relation_list <- list(
    "Information Systems" = "Information Systems Management"
)

ges_smu$relation <- sapply(ges_smu$relation, function(x){deg_replaces(x, relation_list)})

smu_admis_deg <- smu_admis %>% 
  select(relation) %>% 
  distinct(relation) %>% 
  arrange(relation)

ges_smu_deg <- ges_smu %>% 
  select(degree, relation, school) %>% 
  distinct(degree, .keep_all = T) %>% 
  arrange(degree)
```


# Combining all data
Now we combine all the data into two files
```{r}
uni <- list("Nanyang Technological University" = "NTU",
            "National University of Singapore" = "NUS",
            "Singapore Management University" = "SMU")
ges_cleaned <- rbind(ges_nus, ges_ntu, ges_smu) 
ges_cleaned$university <- sapply(ges_cleaned$university, function(x){deg_replaces(x, uni)})


admissions_cleaned <- rbind(nus_admis, ntu_admis, smu_admis)
admissions_cleaned$university <- sapply(admissions_cleaned$university, function(x){deg_replaces(x, uni)})

# In tableau will need to specify these 3 relationships or there will be extra matches
test <- left_join(ges_cleaned, admissions_cleaned, by =c("relation" = "relation", "year" = "Year", "university" = "university"), suffix = c("_ges", "_igp"), keep = T)

# Exporting to an excel workbook with two sheets
write_xlsx(x = list("ges_data" = ges_cleaned, "admissions_data" = admissions_cleaned), path = "../GES Data/consolidated.xlsx")

```

